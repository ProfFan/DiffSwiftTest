import Foundation
import TensorFlow
import XCTest

import SwiftFusion

% import math
% dims = range(1, 10)

class ConcreteEuclideanVectorTests: XCTestCase {
  % for dim in dims:
  % if dim <= 3:
  %   coordinates = ['x', 'y', 'z'][0:dim]
  % else:
  %   coordinates = ['s%d' % i for i in range(dim)]
  % end
  % values1 = range(1, dim + 1)
  % values2 = range(dim + 1, 2 * dim + 1)

  /// Test that initializing a vector from coordinate values works.
  func testVector${dim}Init() {
    let vector1 = Vector${dim}(${', '.join([str(v) for v in values1])})
    % for (index, coordinate) in enumerate(coordinates):
    XCTAssertEqual(vector1.${coordinate}, ${values1[index]})
    % end
  }

  % end
}

% for dim in dims:
/// Tests the `EuclideanVector` requirements.
class Vector${dim}EuclideanVectorTests: XCTestCase, EuclideanVectorTests {
  typealias Testee = Vector${dim}
  static var dimension: Int { return ${dim} }
  func testAll() {
    runAllEuclideanVectorTests()
  }
}
% end
